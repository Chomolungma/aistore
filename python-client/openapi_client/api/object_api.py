# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class ObjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param InputParameters input_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Delete object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param InputParameters input_parameters:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket_name', 'object_name', 'input_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket_name' is set
        if ('bucket_name' not in local_var_params or
                local_var_params['bucket_name'] is None):
            raise ValueError("Missing the required parameter `bucket_name` when calling `delete`")  # noqa: E501
        # verify the required parameter 'object_name' is set
        if ('object_name' not in local_var_params or
                local_var_params['object_name'] is None):
            raise ValueError("Missing the required parameter `object_name` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_name' in local_var_params:
            path_params['bucket-name'] = local_var_params['bucket_name']  # noqa: E501
        if 'object_name' in local_var_params:
            path_params['object-name'] = local_var_params['object_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input_parameters' in local_var_params:
            body_params = local_var_params['input_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/objects/{bucket-name}/{object-name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Get object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param int offset: Starting byte from where the read needs to be performed
        :param int length: Number of bytes that need to be returned starting from the offset
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Get object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param int offset: Starting byte from where the read needs to be performed
        :param int length: Number of bytes that need to be returned starting from the offset
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket_name', 'object_name', 'offset', 'length']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket_name' is set
        if ('bucket_name' not in local_var_params or
                local_var_params['bucket_name'] is None):
            raise ValueError("Missing the required parameter `bucket_name` when calling `get`")  # noqa: E501
        # verify the required parameter 'object_name' is set
        if ('object_name' not in local_var_params or
                local_var_params['object_name'] is None):
            raise ValueError("Missing the required parameter `object_name` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_name' in local_var_params:
            path_params['bucket-name'] = local_var_params['bucket_name']  # noqa: E501
        if 'object_name' in local_var_params:
            path_params['object-name'] = local_var_params['object_name']  # noqa: E501

        query_params = []
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'length' in local_var_params:
            query_params.append(('length', local_var_params['length']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/objects/{bucket-name}/{object-name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_properties(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Query object properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param bool check_cached: Check if the object is cached
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_properties_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_properties_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
            return data

    def get_properties_with_http_info(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Query object properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_properties_with_http_info(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param bool check_cached: Check if the object is cached
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket_name', 'object_name', 'check_cached']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_properties" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket_name' is set
        if ('bucket_name' not in local_var_params or
                local_var_params['bucket_name'] is None):
            raise ValueError("Missing the required parameter `bucket_name` when calling `get_properties`")  # noqa: E501
        # verify the required parameter 'object_name' is set
        if ('object_name' not in local_var_params or
                local_var_params['object_name'] is None):
            raise ValueError("Missing the required parameter `object_name` when calling `get_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_name' in local_var_params:
            path_params['bucket-name'] = local_var_params['bucket_name']  # noqa: E501
        if 'object_name' in local_var_params:
            path_params['object-name'] = local_var_params['object_name']  # noqa: E501

        query_params = []
        if 'check_cached' in local_var_params:
            query_params.append(('check_cached', local_var_params['check_cached']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/objects/{bucket-name}/{object-name}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_operation(self, bucket_name, object_name, input_parameters, **kwargs):  # noqa: E501
        """Perform operations on object such as rename  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_operation(bucket_name, object_name, input_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param InputParameters input_parameters: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_operation_with_http_info(bucket_name, object_name, input_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_operation_with_http_info(bucket_name, object_name, input_parameters, **kwargs)  # noqa: E501
            return data

    def perform_operation_with_http_info(self, bucket_name, object_name, input_parameters, **kwargs):  # noqa: E501
        """Perform operations on object such as rename  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_operation_with_http_info(bucket_name, object_name, input_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param InputParameters input_parameters: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket_name', 'object_name', 'input_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_operation" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket_name' is set
        if ('bucket_name' not in local_var_params or
                local_var_params['bucket_name'] is None):
            raise ValueError("Missing the required parameter `bucket_name` when calling `perform_operation`")  # noqa: E501
        # verify the required parameter 'object_name' is set
        if ('object_name' not in local_var_params or
                local_var_params['object_name'] is None):
            raise ValueError("Missing the required parameter `object_name` when calling `perform_operation`")  # noqa: E501
        # verify the required parameter 'input_parameters' is set
        if ('input_parameters' not in local_var_params or
                local_var_params['input_parameters'] is None):
            raise ValueError("Missing the required parameter `input_parameters` when calling `perform_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_name' in local_var_params:
            path_params['bucket-name'] = local_var_params['bucket_name']  # noqa: E501
        if 'object_name' in local_var_params:
            path_params['object-name'] = local_var_params['object_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input_parameters' in local_var_params:
            body_params = local_var_params['input_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/objects/{bucket-name}/{object-name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Put object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param str from_id: Source target ID
        :param str to_id: Destination target ID
        :param file body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
        else:
            (data) = self.put_with_http_info(bucket_name, object_name, **kwargs)  # noqa: E501
            return data

    def put_with_http_info(self, bucket_name, object_name, **kwargs):  # noqa: E501
        """Put object  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_with_http_info(bucket_name, object_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bucket_name: Bucket name (required)
        :param str object_name: Object name (required)
        :param str from_id: Source target ID
        :param str to_id: Destination target ID
        :param file body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bucket_name', 'object_name', 'from_id', 'to_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bucket_name' is set
        if ('bucket_name' not in local_var_params or
                local_var_params['bucket_name'] is None):
            raise ValueError("Missing the required parameter `bucket_name` when calling `put`")  # noqa: E501
        # verify the required parameter 'object_name' is set
        if ('object_name' not in local_var_params or
                local_var_params['object_name'] is None):
            raise ValueError("Missing the required parameter `object_name` when calling `put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_name' in local_var_params:
            path_params['bucket-name'] = local_var_params['bucket_name']  # noqa: E501
        if 'object_name' in local_var_params:
            path_params['object-name'] = local_var_params['object_name']  # noqa: E501

        query_params = []
        if 'from_id' in local_var_params:
            query_params.append(('from_id', local_var_params['from_id']))  # noqa: E501
        if 'to_id' in local_var_params:
            query_params.append(('to_id', local_var_params['to_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/objects/{bucket-name}/{object-name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
