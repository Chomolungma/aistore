# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BucketPropsCksumConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'checksum': 'str',
        'validate_checksum_cold_get': 'bool',
        'validate_checksum_warm_get': 'bool',
        'enable_read_range_checksum': 'bool'
    }

    attribute_map = {
        'checksum': 'checksum',
        'validate_checksum_cold_get': 'validate_checksum_cold_get',
        'validate_checksum_warm_get': 'validate_checksum_warm_get',
        'enable_read_range_checksum': 'enable_read_range_checksum'
    }

    def __init__(self, checksum=None, validate_checksum_cold_get=None, validate_checksum_warm_get=None, enable_read_range_checksum=None):  # noqa: E501
        """BucketPropsCksumConfig - a model defined in OpenAPI"""  # noqa: E501

        self._checksum = None
        self._validate_checksum_cold_get = None
        self._validate_checksum_warm_get = None
        self._enable_read_range_checksum = None
        self.discriminator = None

        if checksum is not None:
            self.checksum = checksum
        if validate_checksum_cold_get is not None:
            self.validate_checksum_cold_get = validate_checksum_cold_get
        if validate_checksum_warm_get is not None:
            self.validate_checksum_warm_get = validate_checksum_warm_get
        if enable_read_range_checksum is not None:
            self.enable_read_range_checksum = enable_read_range_checksum

    @property
    def checksum(self):
        """Gets the checksum of this BucketPropsCksumConfig.  # noqa: E501


        :return: The checksum of this BucketPropsCksumConfig.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this BucketPropsCksumConfig.


        :param checksum: The checksum of this BucketPropsCksumConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["xxhash", "none", "inherit"]  # noqa: E501
        if checksum not in allowed_values:
            raise ValueError(
                "Invalid value for `checksum` ({0}), must be one of {1}"  # noqa: E501
                .format(checksum, allowed_values)
            )

        self._checksum = checksum

    @property
    def validate_checksum_cold_get(self):
        """Gets the validate_checksum_cold_get of this BucketPropsCksumConfig.  # noqa: E501


        :return: The validate_checksum_cold_get of this BucketPropsCksumConfig.  # noqa: E501
        :rtype: bool
        """
        return self._validate_checksum_cold_get

    @validate_checksum_cold_get.setter
    def validate_checksum_cold_get(self, validate_checksum_cold_get):
        """Sets the validate_checksum_cold_get of this BucketPropsCksumConfig.


        :param validate_checksum_cold_get: The validate_checksum_cold_get of this BucketPropsCksumConfig.  # noqa: E501
        :type: bool
        """

        self._validate_checksum_cold_get = validate_checksum_cold_get

    @property
    def validate_checksum_warm_get(self):
        """Gets the validate_checksum_warm_get of this BucketPropsCksumConfig.  # noqa: E501


        :return: The validate_checksum_warm_get of this BucketPropsCksumConfig.  # noqa: E501
        :rtype: bool
        """
        return self._validate_checksum_warm_get

    @validate_checksum_warm_get.setter
    def validate_checksum_warm_get(self, validate_checksum_warm_get):
        """Sets the validate_checksum_warm_get of this BucketPropsCksumConfig.


        :param validate_checksum_warm_get: The validate_checksum_warm_get of this BucketPropsCksumConfig.  # noqa: E501
        :type: bool
        """

        self._validate_checksum_warm_get = validate_checksum_warm_get

    @property
    def enable_read_range_checksum(self):
        """Gets the enable_read_range_checksum of this BucketPropsCksumConfig.  # noqa: E501


        :return: The enable_read_range_checksum of this BucketPropsCksumConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_read_range_checksum

    @enable_read_range_checksum.setter
    def enable_read_range_checksum(self, enable_read_range_checksum):
        """Sets the enable_read_range_checksum of this BucketPropsCksumConfig.


        :param enable_read_range_checksum: The enable_read_range_checksum of this BucketPropsCksumConfig.  # noqa: E501
        :type: bool
        """

        self._enable_read_range_checksum = enable_read_range_checksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketPropsCksumConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
