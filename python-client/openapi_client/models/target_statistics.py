# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TargetStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'core': 'TargetCoreStatistics',
        'capacity': 'dict(str, FileSystemCapacity)',
        'cpuidle': 'str',
        'disk': 'dict(str, str)'
    }

    attribute_map = {
        'core': 'core',
        'capacity': 'capacity',
        'cpuidle': 'cpuidle',
        'disk': 'disk'
    }

    def __init__(self, core=None, capacity=None, cpuidle=None, disk=None):  # noqa: E501
        """TargetStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._core = None
        self._capacity = None
        self._cpuidle = None
        self._disk = None
        self.discriminator = None

        if core is not None:
            self.core = core
        if capacity is not None:
            self.capacity = capacity
        if cpuidle is not None:
            self.cpuidle = cpuidle
        if disk is not None:
            self.disk = disk

    @property
    def core(self):
        """Gets the core of this TargetStatistics.  # noqa: E501


        :return: The core of this TargetStatistics.  # noqa: E501
        :rtype: TargetCoreStatistics
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this TargetStatistics.


        :param core: The core of this TargetStatistics.  # noqa: E501
        :type: TargetCoreStatistics
        """

        self._core = core

    @property
    def capacity(self):
        """Gets the capacity of this TargetStatistics.  # noqa: E501


        :return: The capacity of this TargetStatistics.  # noqa: E501
        :rtype: dict(str, FileSystemCapacity)
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this TargetStatistics.


        :param capacity: The capacity of this TargetStatistics.  # noqa: E501
        :type: dict(str, FileSystemCapacity)
        """

        self._capacity = capacity

    @property
    def cpuidle(self):
        """Gets the cpuidle of this TargetStatistics.  # noqa: E501


        :return: The cpuidle of this TargetStatistics.  # noqa: E501
        :rtype: str
        """
        return self._cpuidle

    @cpuidle.setter
    def cpuidle(self, cpuidle):
        """Sets the cpuidle of this TargetStatistics.


        :param cpuidle: The cpuidle of this TargetStatistics.  # noqa: E501
        :type: str
        """

        self._cpuidle = cpuidle

    @property
    def disk(self):
        """Gets the disk of this TargetStatistics.  # noqa: E501


        :return: The disk of this TargetStatistics.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this TargetStatistics.


        :param disk: The disk of this TargetStatistics.  # noqa: E501
        :type: dict(str, str)
        """

        self._disk = disk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
