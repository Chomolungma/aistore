# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfigurationTimeout(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_timeout': 'str',
        'default_long_timeout': 'str',
        'max_keepalive': 'str',
        'proxy_ping': 'str',
        'cplane_operation': 'str',
        'send_file_time': 'str',
        'startup_time': 'str'
    }

    attribute_map = {
        'default_timeout': 'default_timeout',
        'default_long_timeout': 'default_long_timeout',
        'max_keepalive': 'max_keepalive',
        'proxy_ping': 'proxy_ping',
        'cplane_operation': 'cplane_operation',
        'send_file_time': 'send_file_time',
        'startup_time': 'startup_time'
    }

    def __init__(self, default_timeout=None, default_long_timeout=None, max_keepalive=None, proxy_ping=None, cplane_operation=None, send_file_time=None, startup_time=None):  # noqa: E501
        """DaemonConfigurationTimeout - a model defined in OpenAPI"""  # noqa: E501

        self._default_timeout = None
        self._default_long_timeout = None
        self._max_keepalive = None
        self._proxy_ping = None
        self._cplane_operation = None
        self._send_file_time = None
        self._startup_time = None
        self.discriminator = None

        if default_timeout is not None:
            self.default_timeout = default_timeout
        if default_long_timeout is not None:
            self.default_long_timeout = default_long_timeout
        if max_keepalive is not None:
            self.max_keepalive = max_keepalive
        if proxy_ping is not None:
            self.proxy_ping = proxy_ping
        if cplane_operation is not None:
            self.cplane_operation = cplane_operation
        if send_file_time is not None:
            self.send_file_time = send_file_time
        if startup_time is not None:
            self.startup_time = startup_time

    @property
    def default_timeout(self):
        """Gets the default_timeout of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The default_timeout of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._default_timeout

    @default_timeout.setter
    def default_timeout(self, default_timeout):
        """Sets the default_timeout of this DaemonConfigurationTimeout.


        :param default_timeout: The default_timeout of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._default_timeout = default_timeout

    @property
    def default_long_timeout(self):
        """Gets the default_long_timeout of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The default_long_timeout of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._default_long_timeout

    @default_long_timeout.setter
    def default_long_timeout(self, default_long_timeout):
        """Sets the default_long_timeout of this DaemonConfigurationTimeout.


        :param default_long_timeout: The default_long_timeout of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._default_long_timeout = default_long_timeout

    @property
    def max_keepalive(self):
        """Gets the max_keepalive of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The max_keepalive of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._max_keepalive

    @max_keepalive.setter
    def max_keepalive(self, max_keepalive):
        """Sets the max_keepalive of this DaemonConfigurationTimeout.


        :param max_keepalive: The max_keepalive of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._max_keepalive = max_keepalive

    @property
    def proxy_ping(self):
        """Gets the proxy_ping of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The proxy_ping of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._proxy_ping

    @proxy_ping.setter
    def proxy_ping(self, proxy_ping):
        """Sets the proxy_ping of this DaemonConfigurationTimeout.


        :param proxy_ping: The proxy_ping of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._proxy_ping = proxy_ping

    @property
    def cplane_operation(self):
        """Gets the cplane_operation of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The cplane_operation of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._cplane_operation

    @cplane_operation.setter
    def cplane_operation(self, cplane_operation):
        """Sets the cplane_operation of this DaemonConfigurationTimeout.


        :param cplane_operation: The cplane_operation of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._cplane_operation = cplane_operation

    @property
    def send_file_time(self):
        """Gets the send_file_time of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The send_file_time of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._send_file_time

    @send_file_time.setter
    def send_file_time(self, send_file_time):
        """Sets the send_file_time of this DaemonConfigurationTimeout.


        :param send_file_time: The send_file_time of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._send_file_time = send_file_time

    @property
    def startup_time(self):
        """Gets the startup_time of this DaemonConfigurationTimeout.  # noqa: E501


        :return: The startup_time of this DaemonConfigurationTimeout.  # noqa: E501
        :rtype: str
        """
        return self._startup_time

    @startup_time.setter
    def startup_time(self, startup_time):
        """Sets the startup_time of this DaemonConfigurationTimeout.


        :param startup_time: The startup_time of this DaemonConfigurationTimeout.  # noqa: E501
        :type: str
        """

        self._startup_time = startup_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfigurationTimeout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
