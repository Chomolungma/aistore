# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TargetCoreStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'numcoldget': 'int',
        'bytesloaded': 'int',
        'bytesevicted': 'int',
        'filesevicted': 'int',
        'numsentfiles': 'int',
        'numsentbytes': 'int',
        'numrecvfiles': 'int',
        'numrecvbytes': 'int',
        'numprefetch': 'int',
        'bytesprefetched': 'int',
        'numvchanged': 'int',
        'bytesvchanged': 'int',
        'numbadchecksum': 'int',
        'bytesbadchecksum': 'int'
    }

    attribute_map = {
        'numcoldget': 'numcoldget',
        'bytesloaded': 'bytesloaded',
        'bytesevicted': 'bytesevicted',
        'filesevicted': 'filesevicted',
        'numsentfiles': 'numsentfiles',
        'numsentbytes': 'numsentbytes',
        'numrecvfiles': 'numrecvfiles',
        'numrecvbytes': 'numrecvbytes',
        'numprefetch': 'numprefetch',
        'bytesprefetched': 'bytesprefetched',
        'numvchanged': 'numvchanged',
        'bytesvchanged': 'bytesvchanged',
        'numbadchecksum': 'numbadchecksum',
        'bytesbadchecksum': 'bytesbadchecksum'
    }

    def __init__(self, numcoldget=None, bytesloaded=None, bytesevicted=None, filesevicted=None, numsentfiles=None, numsentbytes=None, numrecvfiles=None, numrecvbytes=None, numprefetch=None, bytesprefetched=None, numvchanged=None, bytesvchanged=None, numbadchecksum=None, bytesbadchecksum=None):  # noqa: E501
        """TargetCoreStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._numcoldget = None
        self._bytesloaded = None
        self._bytesevicted = None
        self._filesevicted = None
        self._numsentfiles = None
        self._numsentbytes = None
        self._numrecvfiles = None
        self._numrecvbytes = None
        self._numprefetch = None
        self._bytesprefetched = None
        self._numvchanged = None
        self._bytesvchanged = None
        self._numbadchecksum = None
        self._bytesbadchecksum = None
        self.discriminator = None

        if numcoldget is not None:
            self.numcoldget = numcoldget
        if bytesloaded is not None:
            self.bytesloaded = bytesloaded
        if bytesevicted is not None:
            self.bytesevicted = bytesevicted
        if filesevicted is not None:
            self.filesevicted = filesevicted
        if numsentfiles is not None:
            self.numsentfiles = numsentfiles
        if numsentbytes is not None:
            self.numsentbytes = numsentbytes
        if numrecvfiles is not None:
            self.numrecvfiles = numrecvfiles
        if numrecvbytes is not None:
            self.numrecvbytes = numrecvbytes
        if numprefetch is not None:
            self.numprefetch = numprefetch
        if bytesprefetched is not None:
            self.bytesprefetched = bytesprefetched
        if numvchanged is not None:
            self.numvchanged = numvchanged
        if bytesvchanged is not None:
            self.bytesvchanged = bytesvchanged
        if numbadchecksum is not None:
            self.numbadchecksum = numbadchecksum
        if bytesbadchecksum is not None:
            self.bytesbadchecksum = bytesbadchecksum

    @property
    def numcoldget(self):
        """Gets the numcoldget of this TargetCoreStatistics.  # noqa: E501


        :return: The numcoldget of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numcoldget

    @numcoldget.setter
    def numcoldget(self, numcoldget):
        """Sets the numcoldget of this TargetCoreStatistics.


        :param numcoldget: The numcoldget of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numcoldget = numcoldget

    @property
    def bytesloaded(self):
        """Gets the bytesloaded of this TargetCoreStatistics.  # noqa: E501


        :return: The bytesloaded of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytesloaded

    @bytesloaded.setter
    def bytesloaded(self, bytesloaded):
        """Sets the bytesloaded of this TargetCoreStatistics.


        :param bytesloaded: The bytesloaded of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._bytesloaded = bytesloaded

    @property
    def bytesevicted(self):
        """Gets the bytesevicted of this TargetCoreStatistics.  # noqa: E501


        :return: The bytesevicted of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytesevicted

    @bytesevicted.setter
    def bytesevicted(self, bytesevicted):
        """Sets the bytesevicted of this TargetCoreStatistics.


        :param bytesevicted: The bytesevicted of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._bytesevicted = bytesevicted

    @property
    def filesevicted(self):
        """Gets the filesevicted of this TargetCoreStatistics.  # noqa: E501


        :return: The filesevicted of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._filesevicted

    @filesevicted.setter
    def filesevicted(self, filesevicted):
        """Sets the filesevicted of this TargetCoreStatistics.


        :param filesevicted: The filesevicted of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._filesevicted = filesevicted

    @property
    def numsentfiles(self):
        """Gets the numsentfiles of this TargetCoreStatistics.  # noqa: E501


        :return: The numsentfiles of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numsentfiles

    @numsentfiles.setter
    def numsentfiles(self, numsentfiles):
        """Sets the numsentfiles of this TargetCoreStatistics.


        :param numsentfiles: The numsentfiles of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numsentfiles = numsentfiles

    @property
    def numsentbytes(self):
        """Gets the numsentbytes of this TargetCoreStatistics.  # noqa: E501


        :return: The numsentbytes of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numsentbytes

    @numsentbytes.setter
    def numsentbytes(self, numsentbytes):
        """Sets the numsentbytes of this TargetCoreStatistics.


        :param numsentbytes: The numsentbytes of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numsentbytes = numsentbytes

    @property
    def numrecvfiles(self):
        """Gets the numrecvfiles of this TargetCoreStatistics.  # noqa: E501


        :return: The numrecvfiles of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numrecvfiles

    @numrecvfiles.setter
    def numrecvfiles(self, numrecvfiles):
        """Sets the numrecvfiles of this TargetCoreStatistics.


        :param numrecvfiles: The numrecvfiles of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numrecvfiles = numrecvfiles

    @property
    def numrecvbytes(self):
        """Gets the numrecvbytes of this TargetCoreStatistics.  # noqa: E501


        :return: The numrecvbytes of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numrecvbytes

    @numrecvbytes.setter
    def numrecvbytes(self, numrecvbytes):
        """Sets the numrecvbytes of this TargetCoreStatistics.


        :param numrecvbytes: The numrecvbytes of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numrecvbytes = numrecvbytes

    @property
    def numprefetch(self):
        """Gets the numprefetch of this TargetCoreStatistics.  # noqa: E501


        :return: The numprefetch of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numprefetch

    @numprefetch.setter
    def numprefetch(self, numprefetch):
        """Sets the numprefetch of this TargetCoreStatistics.


        :param numprefetch: The numprefetch of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numprefetch = numprefetch

    @property
    def bytesprefetched(self):
        """Gets the bytesprefetched of this TargetCoreStatistics.  # noqa: E501


        :return: The bytesprefetched of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytesprefetched

    @bytesprefetched.setter
    def bytesprefetched(self, bytesprefetched):
        """Sets the bytesprefetched of this TargetCoreStatistics.


        :param bytesprefetched: The bytesprefetched of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._bytesprefetched = bytesprefetched

    @property
    def numvchanged(self):
        """Gets the numvchanged of this TargetCoreStatistics.  # noqa: E501


        :return: The numvchanged of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numvchanged

    @numvchanged.setter
    def numvchanged(self, numvchanged):
        """Sets the numvchanged of this TargetCoreStatistics.


        :param numvchanged: The numvchanged of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numvchanged = numvchanged

    @property
    def bytesvchanged(self):
        """Gets the bytesvchanged of this TargetCoreStatistics.  # noqa: E501


        :return: The bytesvchanged of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytesvchanged

    @bytesvchanged.setter
    def bytesvchanged(self, bytesvchanged):
        """Sets the bytesvchanged of this TargetCoreStatistics.


        :param bytesvchanged: The bytesvchanged of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._bytesvchanged = bytesvchanged

    @property
    def numbadchecksum(self):
        """Gets the numbadchecksum of this TargetCoreStatistics.  # noqa: E501


        :return: The numbadchecksum of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._numbadchecksum

    @numbadchecksum.setter
    def numbadchecksum(self, numbadchecksum):
        """Sets the numbadchecksum of this TargetCoreStatistics.


        :param numbadchecksum: The numbadchecksum of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._numbadchecksum = numbadchecksum

    @property
    def bytesbadchecksum(self):
        """Gets the bytesbadchecksum of this TargetCoreStatistics.  # noqa: E501


        :return: The bytesbadchecksum of this TargetCoreStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytesbadchecksum

    @bytesbadchecksum.setter
    def bytesbadchecksum(self, bytesbadchecksum):
        """Sets the bytesbadchecksum of this TargetCoreStatistics.


        :param bytesbadchecksum: The bytesbadchecksum of this TargetCoreStatistics.  # noqa: E501
        :type: int
        """

        self._bytesbadchecksum = bytesbadchecksum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetCoreStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
