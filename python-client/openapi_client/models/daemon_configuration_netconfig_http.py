# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfigurationNetconfigHttp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_num_targets': 'int',
        'use_http2': 'bool',
        'use_https': 'bool',
        'use_as_proxy': 'bool',
        'server_certificate': 'str',
        'server_key': 'str'
    }

    attribute_map = {
        'max_num_targets': 'max_num_targets',
        'use_http2': 'use_http2',
        'use_https': 'use_https',
        'use_as_proxy': 'use_as_proxy',
        'server_certificate': 'server_certificate',
        'server_key': 'server_key'
    }

    def __init__(self, max_num_targets=None, use_http2=None, use_https=None, use_as_proxy=None, server_certificate=None, server_key=None):  # noqa: E501
        """DaemonConfigurationNetconfigHttp - a model defined in OpenAPI"""  # noqa: E501

        self._max_num_targets = None
        self._use_http2 = None
        self._use_https = None
        self._use_as_proxy = None
        self._server_certificate = None
        self._server_key = None
        self.discriminator = None

        if max_num_targets is not None:
            self.max_num_targets = max_num_targets
        if use_http2 is not None:
            self.use_http2 = use_http2
        if use_https is not None:
            self.use_https = use_https
        if use_as_proxy is not None:
            self.use_as_proxy = use_as_proxy
        if server_certificate is not None:
            self.server_certificate = server_certificate
        if server_key is not None:
            self.server_key = server_key

    @property
    def max_num_targets(self):
        """Gets the max_num_targets of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The max_num_targets of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: int
        """
        return self._max_num_targets

    @max_num_targets.setter
    def max_num_targets(self, max_num_targets):
        """Sets the max_num_targets of this DaemonConfigurationNetconfigHttp.


        :param max_num_targets: The max_num_targets of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: int
        """

        self._max_num_targets = max_num_targets

    @property
    def use_http2(self):
        """Gets the use_http2 of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The use_http2 of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: bool
        """
        return self._use_http2

    @use_http2.setter
    def use_http2(self, use_http2):
        """Sets the use_http2 of this DaemonConfigurationNetconfigHttp.


        :param use_http2: The use_http2 of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: bool
        """

        self._use_http2 = use_http2

    @property
    def use_https(self):
        """Gets the use_https of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The use_https of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: bool
        """
        return self._use_https

    @use_https.setter
    def use_https(self, use_https):
        """Sets the use_https of this DaemonConfigurationNetconfigHttp.


        :param use_https: The use_https of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: bool
        """

        self._use_https = use_https

    @property
    def use_as_proxy(self):
        """Gets the use_as_proxy of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The use_as_proxy of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: bool
        """
        return self._use_as_proxy

    @use_as_proxy.setter
    def use_as_proxy(self, use_as_proxy):
        """Sets the use_as_proxy of this DaemonConfigurationNetconfigHttp.


        :param use_as_proxy: The use_as_proxy of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: bool
        """

        self._use_as_proxy = use_as_proxy

    @property
    def server_certificate(self):
        """Gets the server_certificate of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The server_certificate of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this DaemonConfigurationNetconfigHttp.


        :param server_certificate: The server_certificate of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: str
        """

        self._server_certificate = server_certificate

    @property
    def server_key(self):
        """Gets the server_key of this DaemonConfigurationNetconfigHttp.  # noqa: E501


        :return: The server_key of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :rtype: str
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this DaemonConfigurationNetconfigHttp.


        :param server_key: The server_key of this DaemonConfigurationNetconfigHttp.  # noqa: E501
        :type: str
        """

        self._server_key = server_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfigurationNetconfigHttp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
