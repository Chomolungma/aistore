# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfigurationRebalanceConf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'startup_delay_time': 'str',
        'dest_retry_time': 'str',
        'rebalancing_enabled': 'bool'
    }

    attribute_map = {
        'startup_delay_time': 'startup_delay_time',
        'dest_retry_time': 'dest_retry_time',
        'rebalancing_enabled': 'rebalancing_enabled'
    }

    def __init__(self, startup_delay_time=None, dest_retry_time=None, rebalancing_enabled=None):  # noqa: E501
        """DaemonConfigurationRebalanceConf - a model defined in OpenAPI"""  # noqa: E501

        self._startup_delay_time = None
        self._dest_retry_time = None
        self._rebalancing_enabled = None
        self.discriminator = None

        if startup_delay_time is not None:
            self.startup_delay_time = startup_delay_time
        if dest_retry_time is not None:
            self.dest_retry_time = dest_retry_time
        if rebalancing_enabled is not None:
            self.rebalancing_enabled = rebalancing_enabled

    @property
    def startup_delay_time(self):
        """Gets the startup_delay_time of this DaemonConfigurationRebalanceConf.  # noqa: E501


        :return: The startup_delay_time of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :rtype: str
        """
        return self._startup_delay_time

    @startup_delay_time.setter
    def startup_delay_time(self, startup_delay_time):
        """Sets the startup_delay_time of this DaemonConfigurationRebalanceConf.


        :param startup_delay_time: The startup_delay_time of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :type: str
        """

        self._startup_delay_time = startup_delay_time

    @property
    def dest_retry_time(self):
        """Gets the dest_retry_time of this DaemonConfigurationRebalanceConf.  # noqa: E501


        :return: The dest_retry_time of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :rtype: str
        """
        return self._dest_retry_time

    @dest_retry_time.setter
    def dest_retry_time(self, dest_retry_time):
        """Sets the dest_retry_time of this DaemonConfigurationRebalanceConf.


        :param dest_retry_time: The dest_retry_time of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :type: str
        """

        self._dest_retry_time = dest_retry_time

    @property
    def rebalancing_enabled(self):
        """Gets the rebalancing_enabled of this DaemonConfigurationRebalanceConf.  # noqa: E501


        :return: The rebalancing_enabled of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :rtype: bool
        """
        return self._rebalancing_enabled

    @rebalancing_enabled.setter
    def rebalancing_enabled(self, rebalancing_enabled):
        """Sets the rebalancing_enabled of this DaemonConfigurationRebalanceConf.


        :param rebalancing_enabled: The rebalancing_enabled of this DaemonConfigurationRebalanceConf.  # noqa: E501
        :type: bool
        """

        self._rebalancing_enabled = rebalancing_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfigurationRebalanceConf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
