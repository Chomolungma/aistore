# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'confdir': 'str',
        'cloudprovider': 'str',
        'cloud_buckets': 'str',
        'local_buckets': 'str',
        'log': 'DaemonConfigurationLog',
        'periodic': 'DaemonConfigurationPeriodic',
        'timeout': 'DaemonConfigurationTimeout',
        'proxyconfig': 'DaemonConfigurationProxyconfig',
        'lru_config': 'DaemonConfigurationLruConfig',
        'rebalance_conf': 'DaemonConfigurationRebalanceConf',
        'cksum_config': 'DaemonConfigurationCksumConfig',
        'version_config': 'DaemonConfigurationVersionConfig',
        'fspaths': 'dict(str, str)',
        'test_fspaths': 'DaemonConfigurationTestFspaths',
        'netconfig': 'DaemonConfigurationNetconfig',
        'fskeeper': 'DaemonConfigurationFskeeper',
        'auth': 'DaemonConfigurationAuth',
        'keepalivetracker': 'DaemonConfigurationKeepalivetracker',
        'callstats': 'DaemonConfigurationCallstats'
    }

    attribute_map = {
        'confdir': 'confdir',
        'cloudprovider': 'cloudprovider',
        'cloud_buckets': 'cloud_buckets',
        'local_buckets': 'local_buckets',
        'log': 'log',
        'periodic': 'periodic',
        'timeout': 'timeout',
        'proxyconfig': 'proxyconfig',
        'lru_config': 'lru_config',
        'rebalance_conf': 'rebalance_conf',
        'cksum_config': 'cksum_config',
        'version_config': 'version_config',
        'fspaths': 'fspaths',
        'test_fspaths': 'test_fspaths',
        'netconfig': 'netconfig',
        'fskeeper': 'fskeeper',
        'auth': 'auth',
        'keepalivetracker': 'keepalivetracker',
        'callstats': 'callstats'
    }

    def __init__(self, confdir=None, cloudprovider=None, cloud_buckets=None, local_buckets=None, log=None, periodic=None, timeout=None, proxyconfig=None, lru_config=None, rebalance_conf=None, cksum_config=None, version_config=None, fspaths=None, test_fspaths=None, netconfig=None, fskeeper=None, auth=None, keepalivetracker=None, callstats=None):  # noqa: E501
        """DaemonConfiguration - a model defined in OpenAPI"""  # noqa: E501

        self._confdir = None
        self._cloudprovider = None
        self._cloud_buckets = None
        self._local_buckets = None
        self._log = None
        self._periodic = None
        self._timeout = None
        self._proxyconfig = None
        self._lru_config = None
        self._rebalance_conf = None
        self._cksum_config = None
        self._version_config = None
        self._fspaths = None
        self._test_fspaths = None
        self._netconfig = None
        self._fskeeper = None
        self._auth = None
        self._keepalivetracker = None
        self._callstats = None
        self.discriminator = None

        if confdir is not None:
            self.confdir = confdir
        if cloudprovider is not None:
            self.cloudprovider = cloudprovider
        if cloud_buckets is not None:
            self.cloud_buckets = cloud_buckets
        if local_buckets is not None:
            self.local_buckets = local_buckets
        if log is not None:
            self.log = log
        if periodic is not None:
            self.periodic = periodic
        if timeout is not None:
            self.timeout = timeout
        if proxyconfig is not None:
            self.proxyconfig = proxyconfig
        if lru_config is not None:
            self.lru_config = lru_config
        if rebalance_conf is not None:
            self.rebalance_conf = rebalance_conf
        if cksum_config is not None:
            self.cksum_config = cksum_config
        if version_config is not None:
            self.version_config = version_config
        if fspaths is not None:
            self.fspaths = fspaths
        if test_fspaths is not None:
            self.test_fspaths = test_fspaths
        if netconfig is not None:
            self.netconfig = netconfig
        if fskeeper is not None:
            self.fskeeper = fskeeper
        if auth is not None:
            self.auth = auth
        if keepalivetracker is not None:
            self.keepalivetracker = keepalivetracker
        if callstats is not None:
            self.callstats = callstats

    @property
    def confdir(self):
        """Gets the confdir of this DaemonConfiguration.  # noqa: E501


        :return: The confdir of this DaemonConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._confdir

    @confdir.setter
    def confdir(self, confdir):
        """Sets the confdir of this DaemonConfiguration.


        :param confdir: The confdir of this DaemonConfiguration.  # noqa: E501
        :type: str
        """

        self._confdir = confdir

    @property
    def cloudprovider(self):
        """Gets the cloudprovider of this DaemonConfiguration.  # noqa: E501


        :return: The cloudprovider of this DaemonConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cloudprovider

    @cloudprovider.setter
    def cloudprovider(self, cloudprovider):
        """Sets the cloudprovider of this DaemonConfiguration.


        :param cloudprovider: The cloudprovider of this DaemonConfiguration.  # noqa: E501
        :type: str
        """

        self._cloudprovider = cloudprovider

    @property
    def cloud_buckets(self):
        """Gets the cloud_buckets of this DaemonConfiguration.  # noqa: E501


        :return: The cloud_buckets of this DaemonConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._cloud_buckets

    @cloud_buckets.setter
    def cloud_buckets(self, cloud_buckets):
        """Sets the cloud_buckets of this DaemonConfiguration.


        :param cloud_buckets: The cloud_buckets of this DaemonConfiguration.  # noqa: E501
        :type: str
        """

        self._cloud_buckets = cloud_buckets

    @property
    def local_buckets(self):
        """Gets the local_buckets of this DaemonConfiguration.  # noqa: E501


        :return: The local_buckets of this DaemonConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._local_buckets

    @local_buckets.setter
    def local_buckets(self, local_buckets):
        """Sets the local_buckets of this DaemonConfiguration.


        :param local_buckets: The local_buckets of this DaemonConfiguration.  # noqa: E501
        :type: str
        """

        self._local_buckets = local_buckets

    @property
    def log(self):
        """Gets the log of this DaemonConfiguration.  # noqa: E501


        :return: The log of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationLog
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this DaemonConfiguration.


        :param log: The log of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationLog
        """

        self._log = log

    @property
    def periodic(self):
        """Gets the periodic of this DaemonConfiguration.  # noqa: E501


        :return: The periodic of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationPeriodic
        """
        return self._periodic

    @periodic.setter
    def periodic(self, periodic):
        """Sets the periodic of this DaemonConfiguration.


        :param periodic: The periodic of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationPeriodic
        """

        self._periodic = periodic

    @property
    def timeout(self):
        """Gets the timeout of this DaemonConfiguration.  # noqa: E501


        :return: The timeout of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationTimeout
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this DaemonConfiguration.


        :param timeout: The timeout of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationTimeout
        """

        self._timeout = timeout

    @property
    def proxyconfig(self):
        """Gets the proxyconfig of this DaemonConfiguration.  # noqa: E501


        :return: The proxyconfig of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationProxyconfig
        """
        return self._proxyconfig

    @proxyconfig.setter
    def proxyconfig(self, proxyconfig):
        """Sets the proxyconfig of this DaemonConfiguration.


        :param proxyconfig: The proxyconfig of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationProxyconfig
        """

        self._proxyconfig = proxyconfig

    @property
    def lru_config(self):
        """Gets the lru_config of this DaemonConfiguration.  # noqa: E501


        :return: The lru_config of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationLruConfig
        """
        return self._lru_config

    @lru_config.setter
    def lru_config(self, lru_config):
        """Sets the lru_config of this DaemonConfiguration.


        :param lru_config: The lru_config of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationLruConfig
        """

        self._lru_config = lru_config

    @property
    def rebalance_conf(self):
        """Gets the rebalance_conf of this DaemonConfiguration.  # noqa: E501


        :return: The rebalance_conf of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationRebalanceConf
        """
        return self._rebalance_conf

    @rebalance_conf.setter
    def rebalance_conf(self, rebalance_conf):
        """Sets the rebalance_conf of this DaemonConfiguration.


        :param rebalance_conf: The rebalance_conf of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationRebalanceConf
        """

        self._rebalance_conf = rebalance_conf

    @property
    def cksum_config(self):
        """Gets the cksum_config of this DaemonConfiguration.  # noqa: E501


        :return: The cksum_config of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationCksumConfig
        """
        return self._cksum_config

    @cksum_config.setter
    def cksum_config(self, cksum_config):
        """Sets the cksum_config of this DaemonConfiguration.


        :param cksum_config: The cksum_config of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationCksumConfig
        """

        self._cksum_config = cksum_config

    @property
    def version_config(self):
        """Gets the version_config of this DaemonConfiguration.  # noqa: E501


        :return: The version_config of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationVersionConfig
        """
        return self._version_config

    @version_config.setter
    def version_config(self, version_config):
        """Sets the version_config of this DaemonConfiguration.


        :param version_config: The version_config of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationVersionConfig
        """

        self._version_config = version_config

    @property
    def fspaths(self):
        """Gets the fspaths of this DaemonConfiguration.  # noqa: E501


        :return: The fspaths of this DaemonConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._fspaths

    @fspaths.setter
    def fspaths(self, fspaths):
        """Sets the fspaths of this DaemonConfiguration.


        :param fspaths: The fspaths of this DaemonConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._fspaths = fspaths

    @property
    def test_fspaths(self):
        """Gets the test_fspaths of this DaemonConfiguration.  # noqa: E501


        :return: The test_fspaths of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationTestFspaths
        """
        return self._test_fspaths

    @test_fspaths.setter
    def test_fspaths(self, test_fspaths):
        """Sets the test_fspaths of this DaemonConfiguration.


        :param test_fspaths: The test_fspaths of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationTestFspaths
        """

        self._test_fspaths = test_fspaths

    @property
    def netconfig(self):
        """Gets the netconfig of this DaemonConfiguration.  # noqa: E501


        :return: The netconfig of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationNetconfig
        """
        return self._netconfig

    @netconfig.setter
    def netconfig(self, netconfig):
        """Sets the netconfig of this DaemonConfiguration.


        :param netconfig: The netconfig of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationNetconfig
        """

        self._netconfig = netconfig

    @property
    def fskeeper(self):
        """Gets the fskeeper of this DaemonConfiguration.  # noqa: E501


        :return: The fskeeper of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationFskeeper
        """
        return self._fskeeper

    @fskeeper.setter
    def fskeeper(self, fskeeper):
        """Sets the fskeeper of this DaemonConfiguration.


        :param fskeeper: The fskeeper of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationFskeeper
        """

        self._fskeeper = fskeeper

    @property
    def auth(self):
        """Gets the auth of this DaemonConfiguration.  # noqa: E501


        :return: The auth of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this DaemonConfiguration.


        :param auth: The auth of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationAuth
        """

        self._auth = auth

    @property
    def keepalivetracker(self):
        """Gets the keepalivetracker of this DaemonConfiguration.  # noqa: E501


        :return: The keepalivetracker of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationKeepalivetracker
        """
        return self._keepalivetracker

    @keepalivetracker.setter
    def keepalivetracker(self, keepalivetracker):
        """Sets the keepalivetracker of this DaemonConfiguration.


        :param keepalivetracker: The keepalivetracker of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationKeepalivetracker
        """

        self._keepalivetracker = keepalivetracker

    @property
    def callstats(self):
        """Gets the callstats of this DaemonConfiguration.  # noqa: E501


        :return: The callstats of this DaemonConfiguration.  # noqa: E501
        :rtype: DaemonConfigurationCallstats
        """
        return self._callstats

    @callstats.setter
    def callstats(self, callstats):
        """Sets the callstats of this DaemonConfiguration.


        :param callstats: The callstats of this DaemonConfiguration.  # noqa: E501
        :type: DaemonConfigurationCallstats
        """

        self._callstats = callstats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
