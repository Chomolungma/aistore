# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class NetInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'node_ip_addr': 'str',
        'daemon_port': 'str',
        'direct_url': 'str'
    }

    attribute_map = {
        'node_ip_addr': 'node_ip_addr',
        'daemon_port': 'daemon_port',
        'direct_url': 'direct_url'
    }

    def __init__(self, node_ip_addr=None, daemon_port=None, direct_url=None):  # noqa: E501
        """NetInfo - a model defined in OpenAPI"""  # noqa: E501

        self._node_ip_addr = None
        self._daemon_port = None
        self._direct_url = None
        self.discriminator = None

        if node_ip_addr is not None:
            self.node_ip_addr = node_ip_addr
        if daemon_port is not None:
            self.daemon_port = daemon_port
        if direct_url is not None:
            self.direct_url = direct_url

    @property
    def node_ip_addr(self):
        """Gets the node_ip_addr of this NetInfo.  # noqa: E501


        :return: The node_ip_addr of this NetInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_ip_addr

    @node_ip_addr.setter
    def node_ip_addr(self, node_ip_addr):
        """Sets the node_ip_addr of this NetInfo.


        :param node_ip_addr: The node_ip_addr of this NetInfo.  # noqa: E501
        :type: str
        """

        self._node_ip_addr = node_ip_addr

    @property
    def daemon_port(self):
        """Gets the daemon_port of this NetInfo.  # noqa: E501


        :return: The daemon_port of this NetInfo.  # noqa: E501
        :rtype: str
        """
        return self._daemon_port

    @daemon_port.setter
    def daemon_port(self, daemon_port):
        """Sets the daemon_port of this NetInfo.


        :param daemon_port: The daemon_port of this NetInfo.  # noqa: E501
        :type: str
        """

        self._daemon_port = daemon_port

    @property
    def direct_url(self):
        """Gets the direct_url of this NetInfo.  # noqa: E501


        :return: The direct_url of this NetInfo.  # noqa: E501
        :rtype: str
        """
        return self._direct_url

    @direct_url.setter
    def direct_url(self, direct_url):
        """Sets the direct_url of this NetInfo.


        :param direct_url: The direct_url of this NetInfo.  # noqa: E501
        :type: str
        """

        self._direct_url = direct_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
