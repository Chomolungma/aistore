# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RebalanceTargetStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'xaction_details': 'list[XactionDetails]',
        'num_sent_files': 'int',
        'num_sent_bytes': 'int',
        'num_recv_files': 'int',
        'num_recv_bytes': 'int'
    }

    attribute_map = {
        'xaction_details': 'xactionDetails',
        'num_sent_files': 'numSentFiles',
        'num_sent_bytes': 'numSentBytes',
        'num_recv_files': 'numRecvFiles',
        'num_recv_bytes': 'numRecvBytes'
    }

    def __init__(self, xaction_details=None, num_sent_files=None, num_sent_bytes=None, num_recv_files=None, num_recv_bytes=None):  # noqa: E501
        """RebalanceTargetStatistics - a model defined in OpenAPI"""  # noqa: E501

        self._xaction_details = None
        self._num_sent_files = None
        self._num_sent_bytes = None
        self._num_recv_files = None
        self._num_recv_bytes = None
        self.discriminator = None

        if xaction_details is not None:
            self.xaction_details = xaction_details
        if num_sent_files is not None:
            self.num_sent_files = num_sent_files
        if num_sent_bytes is not None:
            self.num_sent_bytes = num_sent_bytes
        if num_recv_files is not None:
            self.num_recv_files = num_recv_files
        if num_recv_bytes is not None:
            self.num_recv_bytes = num_recv_bytes

    @property
    def xaction_details(self):
        """Gets the xaction_details of this RebalanceTargetStatistics.  # noqa: E501


        :return: The xaction_details of this RebalanceTargetStatistics.  # noqa: E501
        :rtype: list[XactionDetails]
        """
        return self._xaction_details

    @xaction_details.setter
    def xaction_details(self, xaction_details):
        """Sets the xaction_details of this RebalanceTargetStatistics.


        :param xaction_details: The xaction_details of this RebalanceTargetStatistics.  # noqa: E501
        :type: list[XactionDetails]
        """

        self._xaction_details = xaction_details

    @property
    def num_sent_files(self):
        """Gets the num_sent_files of this RebalanceTargetStatistics.  # noqa: E501


        :return: The num_sent_files of this RebalanceTargetStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_sent_files

    @num_sent_files.setter
    def num_sent_files(self, num_sent_files):
        """Sets the num_sent_files of this RebalanceTargetStatistics.


        :param num_sent_files: The num_sent_files of this RebalanceTargetStatistics.  # noqa: E501
        :type: int
        """

        self._num_sent_files = num_sent_files

    @property
    def num_sent_bytes(self):
        """Gets the num_sent_bytes of this RebalanceTargetStatistics.  # noqa: E501


        :return: The num_sent_bytes of this RebalanceTargetStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_sent_bytes

    @num_sent_bytes.setter
    def num_sent_bytes(self, num_sent_bytes):
        """Sets the num_sent_bytes of this RebalanceTargetStatistics.


        :param num_sent_bytes: The num_sent_bytes of this RebalanceTargetStatistics.  # noqa: E501
        :type: int
        """

        self._num_sent_bytes = num_sent_bytes

    @property
    def num_recv_files(self):
        """Gets the num_recv_files of this RebalanceTargetStatistics.  # noqa: E501


        :return: The num_recv_files of this RebalanceTargetStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_recv_files

    @num_recv_files.setter
    def num_recv_files(self, num_recv_files):
        """Sets the num_recv_files of this RebalanceTargetStatistics.


        :param num_recv_files: The num_recv_files of this RebalanceTargetStatistics.  # noqa: E501
        :type: int
        """

        self._num_recv_files = num_recv_files

    @property
    def num_recv_bytes(self):
        """Gets the num_recv_bytes of this RebalanceTargetStatistics.  # noqa: E501


        :return: The num_recv_bytes of this RebalanceTargetStatistics.  # noqa: E501
        :rtype: int
        """
        return self._num_recv_bytes

    @num_recv_bytes.setter
    def num_recv_bytes(self, num_recv_bytes):
        """Sets the num_recv_bytes of this RebalanceTargetStatistics.


        :param num_recv_bytes: The num_recv_bytes of this RebalanceTargetStatistics.  # noqa: E501
        :type: int
        """

        self._num_recv_bytes = num_recv_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RebalanceTargetStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
