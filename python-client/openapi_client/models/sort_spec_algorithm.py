# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SortSpecAlgorithm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kind': 'str',
        'decreasing': 'bool',
        'seed': 'str',
        'extension': 'str',
        'format_type': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'decreasing': 'decreasing',
        'seed': 'seed',
        'extension': 'extension',
        'format_type': 'format_type'
    }

    def __init__(self, kind=None, decreasing=False, seed=None, extension=None, format_type='string'):  # noqa: E501
        """SortSpecAlgorithm - a model defined in OpenAPI"""  # noqa: E501

        self._kind = None
        self._decreasing = None
        self._seed = None
        self._extension = None
        self._format_type = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if decreasing is not None:
            self.decreasing = decreasing
        if seed is not None:
            self.seed = seed
        if extension is not None:
            self.extension = extension
        if format_type is not None:
            self.format_type = format_type

    @property
    def kind(self):
        """Gets the kind of this SortSpecAlgorithm.  # noqa: E501


        :return: The kind of this SortSpecAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SortSpecAlgorithm.


        :param kind: The kind of this SortSpecAlgorithm.  # noqa: E501
        :type: str
        """
        allowed_values = ["alphanumeric", "content", "shuffle", "none"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def decreasing(self):
        """Gets the decreasing of this SortSpecAlgorithm.  # noqa: E501


        :return: The decreasing of this SortSpecAlgorithm.  # noqa: E501
        :rtype: bool
        """
        return self._decreasing

    @decreasing.setter
    def decreasing(self, decreasing):
        """Sets the decreasing of this SortSpecAlgorithm.


        :param decreasing: The decreasing of this SortSpecAlgorithm.  # noqa: E501
        :type: bool
        """

        self._decreasing = decreasing

    @property
    def seed(self):
        """Gets the seed of this SortSpecAlgorithm.  # noqa: E501


        :return: The seed of this SortSpecAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this SortSpecAlgorithm.


        :param seed: The seed of this SortSpecAlgorithm.  # noqa: E501
        :type: str
        """

        self._seed = seed

    @property
    def extension(self):
        """Gets the extension of this SortSpecAlgorithm.  # noqa: E501

        Content of the file with provided extension will be used as sorting key  # noqa: E501

        :return: The extension of this SortSpecAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this SortSpecAlgorithm.

        Content of the file with provided extension will be used as sorting key  # noqa: E501

        :param extension: The extension of this SortSpecAlgorithm.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def format_type(self):
        """Gets the format_type of this SortSpecAlgorithm.  # noqa: E501

        Format type describes how the content of the file should be interpreted  # noqa: E501

        :return: The format_type of this SortSpecAlgorithm.  # noqa: E501
        :rtype: str
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """Sets the format_type of this SortSpecAlgorithm.

        Format type describes how the content of the file should be interpreted  # noqa: E501

        :param format_type: The format_type of this SortSpecAlgorithm.  # noqa: E501
        :type: str
        """
        allowed_values = ["int", "float", "string"]  # noqa: E501
        if format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `format_type` ({0}), must be one of {1}"  # noqa: E501
                .format(format_type, allowed_values)
            )

        self._format_type = format_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortSpecAlgorithm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
