# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Snode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'daemon_id': 'str',
        'public_net': 'NetInfo',
        'intra_control_net': 'NetInfo',
        'intra_data_net': 'NetInfo'
    }

    attribute_map = {
        'daemon_id': 'daemon_id',
        'public_net': 'public_net',
        'intra_control_net': 'intra_control_net',
        'intra_data_net': 'intra_data_net'
    }

    def __init__(self, daemon_id=None, public_net=None, intra_control_net=None, intra_data_net=None):  # noqa: E501
        """Snode - a model defined in OpenAPI"""  # noqa: E501

        self._daemon_id = None
        self._public_net = None
        self._intra_control_net = None
        self._intra_data_net = None
        self.discriminator = None

        if daemon_id is not None:
            self.daemon_id = daemon_id
        if public_net is not None:
            self.public_net = public_net
        if intra_control_net is not None:
            self.intra_control_net = intra_control_net
        if intra_data_net is not None:
            self.intra_data_net = intra_data_net

    @property
    def daemon_id(self):
        """Gets the daemon_id of this Snode.  # noqa: E501


        :return: The daemon_id of this Snode.  # noqa: E501
        :rtype: str
        """
        return self._daemon_id

    @daemon_id.setter
    def daemon_id(self, daemon_id):
        """Sets the daemon_id of this Snode.


        :param daemon_id: The daemon_id of this Snode.  # noqa: E501
        :type: str
        """

        self._daemon_id = daemon_id

    @property
    def public_net(self):
        """Gets the public_net of this Snode.  # noqa: E501


        :return: The public_net of this Snode.  # noqa: E501
        :rtype: NetInfo
        """
        return self._public_net

    @public_net.setter
    def public_net(self, public_net):
        """Sets the public_net of this Snode.


        :param public_net: The public_net of this Snode.  # noqa: E501
        :type: NetInfo
        """

        self._public_net = public_net

    @property
    def intra_control_net(self):
        """Gets the intra_control_net of this Snode.  # noqa: E501


        :return: The intra_control_net of this Snode.  # noqa: E501
        :rtype: NetInfo
        """
        return self._intra_control_net

    @intra_control_net.setter
    def intra_control_net(self, intra_control_net):
        """Sets the intra_control_net of this Snode.


        :param intra_control_net: The intra_control_net of this Snode.  # noqa: E501
        :type: NetInfo
        """

        self._intra_control_net = intra_control_net

    @property
    def intra_data_net(self):
        """Gets the intra_data_net of this Snode.  # noqa: E501


        :return: The intra_data_net of this Snode.  # noqa: E501
        :rtype: NetInfo
        """
        return self._intra_data_net

    @intra_data_net.setter
    def intra_data_net(self, intra_data_net):
        """Sets the intra_data_net of this Snode.


        :param intra_data_net: The intra_data_net of this Snode.  # noqa: E501
        :type: NetInfo
        """

        self._intra_data_net = intra_data_net

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
