# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfigurationNetconfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ipv4': 'str',
        'l4': 'DaemonConfigurationNetconfigL4',
        'http': 'DaemonConfigurationNetconfigHttp'
    }

    attribute_map = {
        'ipv4': 'ipv4',
        'l4': 'l4',
        'http': 'http'
    }

    def __init__(self, ipv4=None, l4=None, http=None):  # noqa: E501
        """DaemonConfigurationNetconfig - a model defined in OpenAPI"""  # noqa: E501

        self._ipv4 = None
        self._l4 = None
        self._http = None
        self.discriminator = None

        if ipv4 is not None:
            self.ipv4 = ipv4
        if l4 is not None:
            self.l4 = l4
        if http is not None:
            self.http = http

    @property
    def ipv4(self):
        """Gets the ipv4 of this DaemonConfigurationNetconfig.  # noqa: E501


        :return: The ipv4 of this DaemonConfigurationNetconfig.  # noqa: E501
        :rtype: str
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this DaemonConfigurationNetconfig.


        :param ipv4: The ipv4 of this DaemonConfigurationNetconfig.  # noqa: E501
        :type: str
        """

        self._ipv4 = ipv4

    @property
    def l4(self):
        """Gets the l4 of this DaemonConfigurationNetconfig.  # noqa: E501


        :return: The l4 of this DaemonConfigurationNetconfig.  # noqa: E501
        :rtype: DaemonConfigurationNetconfigL4
        """
        return self._l4

    @l4.setter
    def l4(self, l4):
        """Sets the l4 of this DaemonConfigurationNetconfig.


        :param l4: The l4 of this DaemonConfigurationNetconfig.  # noqa: E501
        :type: DaemonConfigurationNetconfigL4
        """

        self._l4 = l4

    @property
    def http(self):
        """Gets the http of this DaemonConfigurationNetconfig.  # noqa: E501


        :return: The http of this DaemonConfigurationNetconfig.  # noqa: E501
        :rtype: DaemonConfigurationNetconfigHttp
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this DaemonConfigurationNetconfig.


        :param http: The http of this DaemonConfigurationNetconfig.  # noqa: E501
        :type: DaemonConfigurationNetconfigHttp
        """

        self._http = http

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfigurationNetconfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
