# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BucketProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_provider': 'str',
        'next_tier_url': 'str',
        'read_policy': 'str',
        'write_policy': 'str',
        'cksum_config': 'BucketPropsCksum'
    }

    attribute_map = {
        'cloud_provider': 'cloud_provider',
        'next_tier_url': 'next_tier_url',
        'read_policy': 'read_policy',
        'write_policy': 'write_policy',
        'cksum_config': 'cksum_config'
    }

    def __init__(self, cloud_provider=None, next_tier_url=None, read_policy=None, write_policy=None, cksum_config=None):  # noqa: E501
        """BucketProps - a model defined in OpenAPI"""  # noqa: E501

        self._cloud_provider = None
        self._next_tier_url = None
        self._read_policy = None
        self._write_policy = None
        self._cksum_config = None
        self.discriminator = None

        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if next_tier_url is not None:
            self.next_tier_url = next_tier_url
        if read_policy is not None:
            self.read_policy = read_policy
        if write_policy is not None:
            self.write_policy = write_policy
        if cksum_config is not None:
            self.cksum_config = cksum_config

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this BucketProps.  # noqa: E501


        :return: The cloud_provider of this BucketProps.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this BucketProps.


        :param cloud_provider: The cloud_provider of this BucketProps.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def next_tier_url(self):
        """Gets the next_tier_url of this BucketProps.  # noqa: E501


        :return: The next_tier_url of this BucketProps.  # noqa: E501
        :rtype: str
        """
        return self._next_tier_url

    @next_tier_url.setter
    def next_tier_url(self, next_tier_url):
        """Sets the next_tier_url of this BucketProps.


        :param next_tier_url: The next_tier_url of this BucketProps.  # noqa: E501
        :type: str
        """

        self._next_tier_url = next_tier_url

    @property
    def read_policy(self):
        """Gets the read_policy of this BucketProps.  # noqa: E501


        :return: The read_policy of this BucketProps.  # noqa: E501
        :rtype: str
        """
        return self._read_policy

    @read_policy.setter
    def read_policy(self, read_policy):
        """Sets the read_policy of this BucketProps.


        :param read_policy: The read_policy of this BucketProps.  # noqa: E501
        :type: str
        """

        self._read_policy = read_policy

    @property
    def write_policy(self):
        """Gets the write_policy of this BucketProps.  # noqa: E501


        :return: The write_policy of this BucketProps.  # noqa: E501
        :rtype: str
        """
        return self._write_policy

    @write_policy.setter
    def write_policy(self, write_policy):
        """Sets the write_policy of this BucketProps.


        :param write_policy: The write_policy of this BucketProps.  # noqa: E501
        :type: str
        """

        self._write_policy = write_policy

    @property
    def cksum_config(self):
        """Gets the cksum_config of this BucketProps.  # noqa: E501


        :return: The cksum_config of this BucketProps.  # noqa: E501
        :rtype: BucketPropsCksum
        """
        return self._cksum_config

    @cksum_config.setter
    def cksum_config(self, cksum_config):
        """Sets the cksum_config of this BucketProps.


        :param cksum_config: The cksum_config of this BucketProps.  # noqa: E501
        :type: BucketPropsCksum
        """

        self._cksum_config = cksum_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
