# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SortSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bucket': 'str',
        'local': 'bool',
        'extension': 'str',
        'shard_size': 'int',
        'input_format': 'str',
        'output_format': 'str',
        'algorithm': 'SortSpecAlgorithm',
        'max_mem_usage': 'str',
        'extract_concurrency_limit': 'int',
        'create_concurrency_limit': 'int'
    }

    attribute_map = {
        'bucket': 'bucket',
        'local': 'local',
        'extension': 'extension',
        'shard_size': 'shard_size',
        'input_format': 'input_format',
        'output_format': 'output_format',
        'algorithm': 'algorithm',
        'max_mem_usage': 'max_mem_usage',
        'extract_concurrency_limit': 'extract_concurrency_limit',
        'create_concurrency_limit': 'create_concurrency_limit'
    }

    def __init__(self, bucket=None, local=False, extension=None, shard_size=None, input_format=None, output_format=None, algorithm=None, max_mem_usage=None, extract_concurrency_limit=10, create_concurrency_limit=10):  # noqa: E501
        """SortSpec - a model defined in OpenAPI"""  # noqa: E501

        self._bucket = None
        self._local = None
        self._extension = None
        self._shard_size = None
        self._input_format = None
        self._output_format = None
        self._algorithm = None
        self._max_mem_usage = None
        self._extract_concurrency_limit = None
        self._create_concurrency_limit = None
        self.discriminator = None

        self.bucket = bucket
        if local is not None:
            self.local = local
        self.extension = extension
        if shard_size is not None:
            self.shard_size = shard_size
        self.input_format = input_format
        self.output_format = output_format
        if algorithm is not None:
            self.algorithm = algorithm
        if max_mem_usage is not None:
            self.max_mem_usage = max_mem_usage
        if extract_concurrency_limit is not None:
            self.extract_concurrency_limit = extract_concurrency_limit
        if create_concurrency_limit is not None:
            self.create_concurrency_limit = create_concurrency_limit

    @property
    def bucket(self):
        """Gets the bucket of this SortSpec.  # noqa: E501

        Name of the bucket from where data is read and written  # noqa: E501

        :return: The bucket of this SortSpec.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this SortSpec.

        Name of the bucket from where data is read and written  # noqa: E501

        :param bucket: The bucket of this SortSpec.  # noqa: E501
        :type: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")  # noqa: E501

        self._bucket = bucket

    @property
    def local(self):
        """Gets the local of this SortSpec.  # noqa: E501

        Describes if the bucket is local or not  # noqa: E501

        :return: The local of this SortSpec.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this SortSpec.

        Describes if the bucket is local or not  # noqa: E501

        :param local: The local of this SortSpec.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def extension(self):
        """Gets the extension of this SortSpec.  # noqa: E501


        :return: The extension of this SortSpec.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this SortSpec.


        :param extension: The extension of this SortSpec.  # noqa: E501
        :type: str
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension

    @property
    def shard_size(self):
        """Gets the shard_size of this SortSpec.  # noqa: E501


        :return: The shard_size of this SortSpec.  # noqa: E501
        :rtype: int
        """
        return self._shard_size

    @shard_size.setter
    def shard_size(self, shard_size):
        """Sets the shard_size of this SortSpec.


        :param shard_size: The shard_size of this SortSpec.  # noqa: E501
        :type: int
        """

        self._shard_size = shard_size

    @property
    def input_format(self):
        """Gets the input_format of this SortSpec.  # noqa: E501


        :return: The input_format of this SortSpec.  # noqa: E501
        :rtype: str
        """
        return self._input_format

    @input_format.setter
    def input_format(self, input_format):
        """Sets the input_format of this SortSpec.


        :param input_format: The input_format of this SortSpec.  # noqa: E501
        :type: str
        """
        if input_format is None:
            raise ValueError("Invalid value for `input_format`, must not be `None`")  # noqa: E501

        self._input_format = input_format

    @property
    def output_format(self):
        """Gets the output_format of this SortSpec.  # noqa: E501


        :return: The output_format of this SortSpec.  # noqa: E501
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this SortSpec.


        :param output_format: The output_format of this SortSpec.  # noqa: E501
        :type: str
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")  # noqa: E501

        self._output_format = output_format

    @property
    def algorithm(self):
        """Gets the algorithm of this SortSpec.  # noqa: E501


        :return: The algorithm of this SortSpec.  # noqa: E501
        :rtype: SortSpecAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this SortSpec.


        :param algorithm: The algorithm of this SortSpec.  # noqa: E501
        :type: SortSpecAlgorithm
        """

        self._algorithm = algorithm

    @property
    def max_mem_usage(self):
        """Gets the max_mem_usage of this SortSpec.  # noqa: E501


        :return: The max_mem_usage of this SortSpec.  # noqa: E501
        :rtype: str
        """
        return self._max_mem_usage

    @max_mem_usage.setter
    def max_mem_usage(self, max_mem_usage):
        """Sets the max_mem_usage of this SortSpec.


        :param max_mem_usage: The max_mem_usage of this SortSpec.  # noqa: E501
        :type: str
        """

        self._max_mem_usage = max_mem_usage

    @property
    def extract_concurrency_limit(self):
        """Gets the extract_concurrency_limit of this SortSpec.  # noqa: E501


        :return: The extract_concurrency_limit of this SortSpec.  # noqa: E501
        :rtype: int
        """
        return self._extract_concurrency_limit

    @extract_concurrency_limit.setter
    def extract_concurrency_limit(self, extract_concurrency_limit):
        """Sets the extract_concurrency_limit of this SortSpec.


        :param extract_concurrency_limit: The extract_concurrency_limit of this SortSpec.  # noqa: E501
        :type: int
        """
        if extract_concurrency_limit is not None and extract_concurrency_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `extract_concurrency_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._extract_concurrency_limit = extract_concurrency_limit

    @property
    def create_concurrency_limit(self):
        """Gets the create_concurrency_limit of this SortSpec.  # noqa: E501


        :return: The create_concurrency_limit of this SortSpec.  # noqa: E501
        :rtype: int
        """
        return self._create_concurrency_limit

    @create_concurrency_limit.setter
    def create_concurrency_limit(self, create_concurrency_limit):
        """Sets the create_concurrency_limit of this SortSpec.


        :param create_concurrency_limit: The create_concurrency_limit of this SortSpec.  # noqa: E501
        :type: int
        """
        if create_concurrency_limit is not None and create_concurrency_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `create_concurrency_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._create_concurrency_limit = create_concurrency_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SortSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
