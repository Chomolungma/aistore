# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DaemonConfigurationLruConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lowwm': 'int',
        'highwm': 'int',
        'atime_cache_max': 'int',
        'dont_evict_time': 'str',
        'capacity_upd_time': 'str',
        'lru_enabled': 'bool'
    }

    attribute_map = {
        'lowwm': 'lowwm',
        'highwm': 'highwm',
        'atime_cache_max': 'atime_cache_max',
        'dont_evict_time': 'dont_evict_time',
        'capacity_upd_time': 'capacity_upd_time',
        'lru_enabled': 'lru_enabled'
    }

    def __init__(self, lowwm=None, highwm=None, atime_cache_max=None, dont_evict_time=None, capacity_upd_time=None, lru_enabled=None):  # noqa: E501
        """DaemonConfigurationLruConfig - a model defined in OpenAPI"""  # noqa: E501

        self._lowwm = None
        self._highwm = None
        self._atime_cache_max = None
        self._dont_evict_time = None
        self._capacity_upd_time = None
        self._lru_enabled = None
        self.discriminator = None

        if lowwm is not None:
            self.lowwm = lowwm
        if highwm is not None:
            self.highwm = highwm
        if atime_cache_max is not None:
            self.atime_cache_max = atime_cache_max
        if dont_evict_time is not None:
            self.dont_evict_time = dont_evict_time
        if capacity_upd_time is not None:
            self.capacity_upd_time = capacity_upd_time
        if lru_enabled is not None:
            self.lru_enabled = lru_enabled

    @property
    def lowwm(self):
        """Gets the lowwm of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The lowwm of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: int
        """
        return self._lowwm

    @lowwm.setter
    def lowwm(self, lowwm):
        """Sets the lowwm of this DaemonConfigurationLruConfig.


        :param lowwm: The lowwm of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: int
        """

        self._lowwm = lowwm

    @property
    def highwm(self):
        """Gets the highwm of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The highwm of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: int
        """
        return self._highwm

    @highwm.setter
    def highwm(self, highwm):
        """Sets the highwm of this DaemonConfigurationLruConfig.


        :param highwm: The highwm of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: int
        """

        self._highwm = highwm

    @property
    def atime_cache_max(self):
        """Gets the atime_cache_max of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The atime_cache_max of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: int
        """
        return self._atime_cache_max

    @atime_cache_max.setter
    def atime_cache_max(self, atime_cache_max):
        """Sets the atime_cache_max of this DaemonConfigurationLruConfig.


        :param atime_cache_max: The atime_cache_max of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: int
        """

        self._atime_cache_max = atime_cache_max

    @property
    def dont_evict_time(self):
        """Gets the dont_evict_time of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The dont_evict_time of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: str
        """
        return self._dont_evict_time

    @dont_evict_time.setter
    def dont_evict_time(self, dont_evict_time):
        """Sets the dont_evict_time of this DaemonConfigurationLruConfig.


        :param dont_evict_time: The dont_evict_time of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: str
        """

        self._dont_evict_time = dont_evict_time

    @property
    def capacity_upd_time(self):
        """Gets the capacity_upd_time of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The capacity_upd_time of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: str
        """
        return self._capacity_upd_time

    @capacity_upd_time.setter
    def capacity_upd_time(self, capacity_upd_time):
        """Sets the capacity_upd_time of this DaemonConfigurationLruConfig.


        :param capacity_upd_time: The capacity_upd_time of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: str
        """

        self._capacity_upd_time = capacity_upd_time

    @property
    def lru_enabled(self):
        """Gets the lru_enabled of this DaemonConfigurationLruConfig.  # noqa: E501


        :return: The lru_enabled of this DaemonConfigurationLruConfig.  # noqa: E501
        :rtype: bool
        """
        return self._lru_enabled

    @lru_enabled.setter
    def lru_enabled(self, lru_enabled):
        """Sets the lru_enabled of this DaemonConfigurationLruConfig.


        :param lru_enabled: The lru_enabled of this DaemonConfigurationLruConfig.  # noqa: E501
        :type: bool
        """

        self._lru_enabled = lru_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DaemonConfigurationLruConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
