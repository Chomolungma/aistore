# coding: utf-8

"""
    DFC

    DFC is a scalable object-storage based caching system with Amazon and Google Cloud backends.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: dfcdev@exchange.nvidia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RangeParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'deadline': 'str',
        'wait': 'bool',
        'prefix': 'str',
        'regex': 'str',
        'range': 'str'
    }

    attribute_map = {
        'deadline': 'deadline',
        'wait': 'wait',
        'prefix': 'prefix',
        'regex': 'regex',
        'range': 'range'
    }

    def __init__(self, deadline=None, wait=None, prefix=None, regex=None, range=None):  # noqa: E501
        """RangeParameters - a model defined in OpenAPI"""  # noqa: E501

        self._deadline = None
        self._wait = None
        self._prefix = None
        self._regex = None
        self._range = None
        self.discriminator = None

        if deadline is not None:
            self.deadline = deadline
        if wait is not None:
            self.wait = wait
        self.prefix = prefix
        self.regex = regex
        self.range = range

    @property
    def deadline(self):
        """Gets the deadline of this RangeParameters.  # noqa: E501


        :return: The deadline of this RangeParameters.  # noqa: E501
        :rtype: str
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this RangeParameters.


        :param deadline: The deadline of this RangeParameters.  # noqa: E501
        :type: str
        """

        self._deadline = deadline

    @property
    def wait(self):
        """Gets the wait of this RangeParameters.  # noqa: E501


        :return: The wait of this RangeParameters.  # noqa: E501
        :rtype: bool
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this RangeParameters.


        :param wait: The wait of this RangeParameters.  # noqa: E501
        :type: bool
        """

        self._wait = wait

    @property
    def prefix(self):
        """Gets the prefix of this RangeParameters.  # noqa: E501


        :return: The prefix of this RangeParameters.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this RangeParameters.


        :param prefix: The prefix of this RangeParameters.  # noqa: E501
        :type: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")  # noqa: E501

        self._prefix = prefix

    @property
    def regex(self):
        """Gets the regex of this RangeParameters.  # noqa: E501


        :return: The regex of this RangeParameters.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this RangeParameters.


        :param regex: The regex of this RangeParameters.  # noqa: E501
        :type: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")  # noqa: E501

        self._regex = regex

    @property
    def range(self):
        """Gets the range of this RangeParameters.  # noqa: E501


        :return: The range of this RangeParameters.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RangeParameters.


        :param range: The range of this RangeParameters.  # noqa: E501
        :type: str
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501

        self._range = range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RangeParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
